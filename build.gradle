import java.util.regex.Pattern

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.0.0'
    }
}

allprojects {
    apply plugin: "eclipse"
    apply plugin: "idea"

    version = '1.0'
    ext {
        appName = '3DReno'
        gdxVersion = '1.5.5'
        roboVMVersion = '1.0.0'
        box2DLightsVersion = '1.3'
        ashleyVersion = '1.3.1'
        aiVersion = '1.5.0'
    }

    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    }
}

project(":desktop") {
    apply plugin: "java"


    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"

        compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"

        compile ("com.thoughtworks.xstream:xstream:1.4.2"){
        }
    }
}

project(":android") {
    apply plugin: "android"

    configurations { natives }

    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"

        compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86"
    }

    task svninfo << {
        new ByteArrayOutputStream().withStream { os ->
            def result = exec {
                executable = 'svn'
                args = ['info']
                standardOutput = os
            }
            def matchLastChangedRev = outputAsString =~ /Révision de la dernière modification : (\d+)/
            //def matchLastChangedRev = outputAsString =~ /Last Changed Rev: (\d+)/
            def rev = matchLastChangedRev[0][1]

            def manifestBaseFile = file("android/manifest/AndroidManifest.xml")
            def manifestFile = file("android/AndroidManifest.xml")
            def pattern = Pattern.compile("(__revision__)")
            def manifestText = manifestBaseFile.getText()
            def matcher = pattern.matcher(manifestText)
            matcher.find()
            println "Setting __revision__ to ${rev} in AndroidManifest.xml"
            def manifestContent = matcher.replaceAll(rev)

            manifestFile.write(manifestContent)
        }
    }
}

project(":jcsg") {
}

project(":ifc2x3javatoolbox") {
}

project(":core") {
    apply plugin: "java"

    dependencies {
        compile project(":jcsg")
        compile project(":ifc2x3javatoolbox")

        compile "com.badlogicgames.gdx:gdx:$gdxVersion"

        compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"

        compile ("com.thoughtworks.xstream:xstream:1.4.2"){
            exclude group: 'xmlpull'
        }

    }
}

tasks.eclipse.doLast {
    delete ".project"
}
