buildscript {
    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.0.0'
    }
}

allprojects {
    apply plugin: "eclipse"
    apply plugin: "idea"

    version = '1.0'
    ext {
        appName = '3DReno'
        gdxVersion = '1.5.5'
        roboVMVersion = '1.0.0'
        box2DLightsVersion = '1.3'
        ashleyVersion = '1.3.1'
        aiVersion = '1.5.0'
    }

    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    }
}

project(":desktop") {
    apply plugin: "java"


    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"

        compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
    }
}

project(":android") {
    apply plugin: "android"

    configurations { natives }

    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"

        compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86"
    }
}

project(":jcsg") {
}

project(":core") {
    apply plugin: "java"

    dependencies {
        compile project(":jcsg")
        compile "com.badlogicgames.gdx:gdx:$gdxVersion"

        compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
    }

    task convert {

        // copy textures
        FileTree textures = fileTree(dir: '../android/assets/data/models/blend/', exclude: '**/*.blend*')

        task copyTextures {

            inputs.dir file('../android/assets/data/models/blend/')
            outputs.dir file('../android/assets/data/models/g3db/')

            textures.each { File file ->
                File target_g3db = new File(file.getPath().replaceAll('blend', 'g3db'))

                copy {
                    from file
                    into target_g3db.getParent()
                }
            }
        }

        convert.dependsOn copyTextures

        // export blend to fbx and make miniatures
        Properties properties = new Properties()
        properties.load(project.rootProject.file('build.properties').newDataInputStream())
        def blender = properties.getProperty('blender')

        FileTree tree = fileTree(dir: '../android/assets/data/models/blend/', include: '**/*.blend')

        tree.each { File file ->
            task "makeFBX${file.path}"(type: Exec) {

                // .../fbx/.../.*.fbx -> .../g3db/.../.*.g3db
                File target = new File(file.getPath().replaceAll('blend', 'fbx'))

                inputs.file file
                outputs.file target

                doFirst {
                    target.getParentFile().mkdirs()
                }

                //linux
                // blender foobar.blend --background --python fbxexporter.py -- foobar.fbx
                commandLine blender, '-b', file, '--python', "$projectDir/../android/assets/data/models/scripts/fbxexporter.py", '--', target

                standardOutput = new ByteArrayOutputStream()

                ext.output = {
                    return standardOutput.toString()
                }
            }

            convert.dependsOn "makeFBX${file.path}"

            task "makeMiniature${file.path}"(type: Exec, dependsOn:"makeFBX${file.path}") {

                // .../fbx/.../.*.fbx -> .../g3db/.../.*.g3db
                File target = new File(file.getPath().replaceAll('blend', 'g3db'))

                doFirst {
                    target.getParentFile().mkdirs()
                }

                // remove extension
                String output = target.path.lastIndexOf('.').with {
                    it != -1 ? target.path[0..<it] : target.path
                }

                inputs.file file
                outputs.dir target

                //linux
                // blender -b file.blend -o //file -F JPEG -x 1 -f 1

                commandLine blender, '-b', file, '-o', output + '#', '-F', 'JPEG', '-x', '1', '-f', '1'

                standardOutput = new ByteArrayOutputStream()

                ext.output = {
                    return standardOutput.toString()
                }

                doLast {
                    // remove trailing frame number
                    new File(output + '1.jpg').renameTo(new File(output + '.jpg'))
                }

            }

            convert.dependsOn "makeMiniature${file.path}"

            task "makeG3DB${file.path}"(type: Exec, dependsOn:"makeFBX${file.path}") {

                // .../fbx/.../.*.fbx -> .../g3db/.../.*.g3db
                File input = new File(file.getPath().replaceAll('blend', 'fbx'))
                File target = new File(file.getPath().replaceAll('blend', 'g3db'))

                inputs.file file
                outputs.dir target

                workingDir '../android/assets/data/models/fbx-conv/'
                environment('LD_LIBRARY_PATH', '.')

                //linux
                commandLine './fbx-conv-lin64', input, target

                standardOutput = new ByteArrayOutputStream()

                ext.output = {
                    return standardOutput.toString()
                }
            }

            convert.dependsOn "makeG3DB${file.path}"
        }
    }

    processResources.dependsOn convert

}

tasks.eclipse.doLast {
    delete ".project"
}
